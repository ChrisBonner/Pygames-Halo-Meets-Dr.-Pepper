#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade 0.6.3 on Sun Mar 22 19:44:15 2009

import wx

# begin wxGlade: extracode
# end wxGlade
import sys, os
import datetime
import pickle
from wx.lib.wordwrap import wordwrap

from pyg_validators import *
from pygame_project import *
from app_helpers import *
from ConfigFile import *

try:
    import psyco
    psyco.full()
except ImportError: pass

__version__ = '0.4 BETA'
APP_NAME = "Pygame Package Builder"

STARTDIR = os.path.abspath(os.path.curdir)
#sys.path.append(os.path.curdir)
sys.argv.append("py2exe")
os.environ['PYTHONPATH'] = os.path.curdir

class AddDirDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: AddDirDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.lblFolder = wx.StaticText(self, -1, "Folder:")
        self.txtDataFolder = wx.TextCtrl(self, -1, "")
        self.DataFolderBrowse = wx.Button(self, -1, "Browse...")
        self.lblWildcard = wx.StaticText(self, -1, "Wildcard:")
        self.txtWildcard = wx.TextCtrl(self, -1, "*.*")
        self.lblDirTarget = wx.StaticText(self, -1, "Target Folder:")
        self.txtDirTarget = wx.TextCtrl(self, -1, "")
        self.chkRecurse = wx.CheckBox(self, -1, "Add subdirectories")
        self.DirOk = wx.Button(self, -1, "Ok")
        self.DirCancel = wx.Button(self, -1, "Cancel")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnDataFolderBrowse, self.DataFolderBrowse)
        self.Bind(wx.EVT_BUTTON, self.OnDirOk, self.DirOk)
        self.Bind(wx.EVT_BUTTON, self.OnDirCancel, self.DirCancel)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: AddDirDialog.__set_properties
        self.SetTitle("Add Folder")
        self.txtDataFolder.SetMinSize((250, -1))
        self.txtWildcard.SetMinSize((50, -1))
        self.txtWildcard.SetToolTipString("Use wildcards to select a subset of files.\n*.* will select all files.")
        self.txtDirTarget.SetToolTipString("Leave blank to copy the folder contents into the root dist folder")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: AddDirDialog.__do_layout
        sizer_37 = wx.BoxSizer(wx.VERTICAL)
        sizer_41 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_40 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_42 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_39 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_39.Add(self.lblFolder, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_39.Add(self.txtDataFolder, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_39.Add(self.DataFolderBrowse, 0, wx.TOP|wx.BOTTOM|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_37.Add(sizer_39, 0, wx.EXPAND, 0)
        sizer_42.Add(self.lblWildcard, 0, wx.LEFT|wx.TOP|wx.BOTTOM|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_42.Add(self.txtWildcard, 0, wx.TOP|wx.BOTTOM|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_37.Add(sizer_42, 0, wx.EXPAND, 0)
        sizer_40.Add(self.lblDirTarget, 0, wx.LEFT|wx.TOP|wx.BOTTOM|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_40.Add(self.txtDirTarget, 0, wx.TOP|wx.BOTTOM|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_40.Add(self.chkRecurse, 0, wx.LEFT|wx.TOP|wx.BOTTOM|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_37.Add(sizer_40, 0, wx.EXPAND, 0)
        sizer_41.Add(self.DirOk, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_41.Add(self.DirCancel, 0, wx.TOP|wx.BOTTOM|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_37.Add(sizer_41, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_37)
        sizer_37.Fit(self)
        self.Layout()
        self.Centre()
        # end wxGlade

    def OnDataFolderBrowse(self, event): # wxGlade: AddDirDialog.<event_handler>
        dlg = wx.DirDialog(self, "Add Folder to Game Data List:",
                          style=wx.DD_DEFAULT_STYLE
                           #| wx.DD_DIR_MUST_EXIST
                           #| wx.DD_CHANGE_DIR
                           )

        if dlg.ShowModal() == wx.ID_OK:
            self.txtDataFolder.SetValue(dlg.GetPath())

        dlg.Destroy()

    def OnDirOk(self, event): # wxGlade: AddDirDialog.<event_handler>
        if self.txtDataFolder.GetValue().strip() == '':
            dlg = wx.MessageDialog(self, "Please select a folder.",
                'Folder Missing',
                wx.OK | wx.ICON_INFORMATION
                #wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
            )
            dlg.ShowModal()
            dlg.Destroy()
            self.DataFolderBrowse.SetFocus()
        else:
            index = self.parent.lstFiles.InsertStringItem(sys.maxint,"Folder")

            self.parent.lstFiles.SetStringItem(index,1,self.txtDataFolder.GetValue().strip())
            if self.chkRecurse.IsChecked():
                self.parent.lstFiles.SetStringItem(index,2,"Yes")
            else:
                self.parent.lstFiles.SetStringItem(index,2,"No")
                
            wildcard = self.txtWildcard.GetValue().strip()
            if wildcard == '': wildcard = '*.*'
            self.parent.lstFiles.SetStringItem(index,3,wildcard)
            self.parent.lstFiles.SetStringItem(index,4,self.txtDirTarget.GetValue().strip())
            self.EndModal(wx.ID_OK)

    def OnDirCancel(self, event): # wxGlade: AddDirDialog.<event_handler>
        self.EndModal(wx.ID_OK)

    def SetParent(self,parent):
        self.parent = parent
# end of class AddDirDialog


class AddFileDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: AddFileDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.AddFile = wx.StaticText(self, -1, "File:")
        self.txtDataFile = wx.TextCtrl(self, -1, "")
        self.DataFileBrowse = wx.Button(self, -1, "Browse...")
        self.lblFileTarget = wx.StaticText(self, -1, "Target Folder:")
        self.txtFileTarget = wx.TextCtrl(self, -1, "")
        self.FileOk = wx.Button(self, -1, "Ok")
        self.FileCancel = wx.Button(self, -1, "Cancel")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnDataFileBrowse, self.DataFileBrowse)
        self.Bind(wx.EVT_BUTTON, self.OnFileOk, self.FileOk)
        self.Bind(wx.EVT_BUTTON, self.OnFileCancel, self.FileCancel)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: AddFileDialog.__set_properties
        self.SetTitle("Add File")
        self.txtDataFile.SetMinSize((200, -1))
        self.txtFileTarget.SetToolTipString("Leave blank to put the file into the root dist folder")
        # end wxGlade
        
    def SetParent(self,parent):
        self.parent = parent
        
    def __do_layout(self):
        # begin wxGlade: AddFileDialog.__do_layout
        sizer_33 = wx.BoxSizer(wx.VERTICAL)
        sizer_36 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_35 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_34 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_34.Add(self.AddFile, 0, wx.LEFT|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_34.Add(self.txtDataFile, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_34.Add(self.DataFileBrowse, 0, wx.TOP|wx.BOTTOM|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_33.Add(sizer_34, 0, wx.EXPAND, 0)
        sizer_35.Add(self.lblFileTarget, 0, wx.LEFT|wx.TOP|wx.BOTTOM|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_35.Add(self.txtFileTarget, 0, wx.TOP|wx.BOTTOM|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_33.Add(sizer_35, 0, wx.EXPAND, 0)
        sizer_36.Add(self.FileOk, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_36.Add(self.FileCancel, 0, wx.TOP|wx.BOTTOM|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_33.Add(sizer_36, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_33)
        sizer_33.Fit(self)
        self.Layout()
        self.Centre()
        # end wxGlade

    def OnDataFileBrowse(self, event): # wxGlade: AddFileDialog.<event_handler>
        flags = wx.FD_OPEN | wx.FD_FILE_MUST_EXIST | wx.FD_CHANGE_DIR
        filterString = "All Files (*.*)|*.*"
        dlg = wx.FileDialog(self, "Add File to Game Data List", os.path.curdir, "", filterString, flags)
        if dlg.ShowModal() == wx.ID_OK:
            self.txtDataFile.SetValue(os.path.join(dlg.GetDirectory(),dlg.GetFilename()))
            
        dlg.Destroy()
        
    def OnFileOk(self, event): # wxGlade: AddFileDialog.<event_handler>
        if self.txtDataFile.GetValue().strip() == '':
            dlg = wx.MessageDialog(self, "A file name is missing.",
                'File Name Missing',
                wx.OK | wx.ICON_INFORMATION
                #wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
            )
            dlg.ShowModal()
            dlg.Destroy()
            self.DataFileBrowse.SetFocus()
        elif not os.path.exists(self.txtDataFile.GetValue().strip()):
            dlg = wx.MessageDialog(self, "File not found or does not exist.",
                'File Not Found',
                wx.OK | wx.ICON_INFORMATION
                #wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
            )
            dlg.ShowModal()
            dlg.Destroy()
            self.DataFileBrowse.SetFocus()
        else:

            index = self.parent.lstFiles.InsertStringItem(sys.maxint,"File")
            self.parent.lstFiles.SetStringItem(index,1,self.txtDataFile.GetValue().strip())
            self.parent.lstFiles.SetStringItem(index,2,"--")
            self.parent.lstFiles.SetStringItem(index,3,"--")
            self.parent.lstFiles.SetStringItem(index,4,self.txtFileTarget.GetValue().strip())
            self.EndModal(wx.ID_OK)


    def OnFileCancel(self, event): # wxGlade: AddFileDialog.<event_handler>
        self.EndModal(wx.ID_OK)

# end of class AddFileDialog


class OptionsDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: OptionsDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.notebook = wx.Notebook(self, -1, style=0)
        self.help_pane = wx.Panel(self.notebook, -1)
        self.defaults_pane = wx.Panel(self.notebook, -1)
        self.lblDefaults = wx.StaticText(self.defaults_pane, -1, "These values will be used as defaults when a new project is started.")
        self.lblAuthor = wx.StaticText(self.defaults_pane, -1, "Author:")
        self.txtAuthor = wx.TextCtrl(self.defaults_pane, -1, "")
        self.lblEmail = wx.StaticText(self.defaults_pane, -1, "E-Mail:")
        self.txtEmail = wx.TextCtrl(self.defaults_pane, -1, "")
        self.lblURL = wx.StaticText(self.defaults_pane, -1, "URL:")
        self.txtURL = wx.TextCtrl(self.defaults_pane, -1, "")
        self.chkCloseQuery = wx.CheckBox(self.defaults_pane, -1, "Ask to save project before closing")
        self.MakeShortcut = wx.Button(self.help_pane, -1, "Make Shortcut")
        self.lblShortcut = wx.StaticText(self.help_pane, -1, "Creates a shortcut on your desktop that will\nlaunch Pygame Package Builder. Windows only.")
        self.static_line_2 = wx.StaticLine(self, -1)
        self.ok = wx.Button(self, -1, "Ok")
        self.apply = wx.Button(self, -1, "Apply")
        self.close = wx.Button(self, -1, "Close")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnMakeShortcut, self.MakeShortcut)
        self.Bind(wx.EVT_BUTTON, self.OnOptionsOk, self.ok)
        self.Bind(wx.EVT_BUTTON, self.OnOptionsApply, self.apply)
        self.Bind(wx.EVT_BUTTON, self.OnOptionsClose, self.close)
        # end wxGlade

    def __set_properties(self):
        global USE_SHELL
        # begin wxGlade: OptionsDialog.__set_properties
        self.SetTitle("Options")
        self.SetSize((400, 350))
        self.txtAuthor.SetMinSize((150, -1))
        self.txtAuthor.SetToolTipString("Default author name")
        self.txtEmail.SetMinSize((150, -1))
        self.txtEmail.SetToolTipString("Default e-mail address")
        self.txtEmail.SetValidator(EMailValidator(None))
        self.txtURL.SetMinSize((150, -1))
        self.txtURL.SetToolTipString("Default URL")
        self.MakeShortcut.Enable(False)
        self.lblShortcut.Enable(False)
        # end wxGlade
        
        #desktop_path = shell.SHGetFolderPath (0, shellcon.CSIDL_DESKTOP, 0, 0)
        self.txtEmail.SetValue(Conf.get('Defaults','author_email'))
        self.txtAuthor.SetValue(Conf.get('Defaults','author_name'))
        self.txtURL.SetValue(Conf.get('Defaults','author_url'))
        self.chkCloseQuery.SetValue(Conf.getint('Defaults','ask_before_close'))
        if sys.platform == 'win32' and USE_SHELL:
            if not shortcutExists():
                self.MakeShortcut.Enable(True)
                self.lblShortcut.Enable(True)


    def __do_layout(self):
        # begin wxGlade: OptionsDialog.__do_layout
        sizer_12 = wx.BoxSizer(wx.VERTICAL)
        sizer_21 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_22 = wx.BoxSizer(wx.VERTICAL)
        sizer_27 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_23 = wx.BoxSizer(wx.VERTICAL)
        sizer_38 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_26 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_25 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_24 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_23.Add(self.lblDefaults, 0, wx.ALL, 3)
        sizer_24.Add((20, 20), 0, 0, 0)
        sizer_24.Add(self.lblAuthor, 0, wx.LEFT|wx.TOP|wx.BOTTOM|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 8)
        sizer_24.Add(self.txtAuthor, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 8)
        sizer_23.Add(sizer_24, 0, wx.EXPAND, 0)
        sizer_25.Add((24, 20), 0, 0, 0)
        sizer_25.Add(self.lblEmail, 0, wx.LEFT|wx.TOP|wx.BOTTOM|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 8)
        sizer_25.Add(self.txtEmail, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 8)
        sizer_23.Add(sizer_25, 0, wx.EXPAND, 0)
        sizer_26.Add((32, 20), 0, 0, 0)
        sizer_26.Add(self.lblURL, 0, wx.LEFT|wx.TOP|wx.BOTTOM|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 8)
        sizer_26.Add(self.txtURL, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 8)
        sizer_23.Add(sizer_26, 0, wx.EXPAND, 0)
        sizer_38.Add(self.chkCloseQuery, 0, wx.LEFT|wx.TOP|wx.BOTTOM|wx.ALIGN_CENTER_VERTICAL, 8)
        sizer_23.Add(sizer_38, 0, wx.EXPAND, 0)
        self.defaults_pane.SetSizer(sizer_23)
        sizer_27.Add(self.MakeShortcut, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_27.Add(self.lblShortcut, 0, wx.TOP|wx.BOTTOM, 5)
        sizer_22.Add(sizer_27, 0, wx.EXPAND, 0)
        self.help_pane.SetSizer(sizer_22)
        self.notebook.AddPage(self.defaults_pane, "Defaults")
        self.notebook.AddPage(self.help_pane, "Help")
        sizer_12.Add(self.notebook, 1, wx.EXPAND, 0)
        sizer_12.Add(self.static_line_2, 0, wx.ALL|wx.EXPAND, 5)
        sizer_21.Add(self.ok, 0, 0, 0)
        sizer_21.Add(self.apply, 0, 0, 0)
        sizer_21.Add(self.close, 0, 0, 0)
        sizer_12.Add(sizer_21, 0, wx.EXPAND|wx.ALIGN_RIGHT, 0)
        self.SetSizer(sizer_12)
        self.Layout()
        self.Centre()
        # end wxGlade

    def OnOptionsOk(self, event): # wxGlade: OptionsDialog.<event_handler>
        self.SaveOptions()
        self.EndModal(wx.ID_OK)

    def OnOptionsApply(self, event): # wxGlade: OptionsDialog.<event_handler>
        self.SaveOptions()
        
    def OnOptionsClose(self, event): # wxGlade: OptionsDialog.<event_handler>
        self.EndModal(wx.ID_OK)
        
    def OnMakeShortcut(self, event): # wxGlade: OptionsDialog.<event_handler>
        if sys.platform == 'win32' and not shortcutExists(): 
            createAppShortcut('pygame_builder.py', os.path.join(os.path.abspath(os.curdir),'pygame.ico'),"Pygame Package Builder")
            self.MakeShortcut.Enable(False)
            self.lblShortcut.Enable(False)
    # end OnMakeShortcut
    
    def SaveOptions(self):
        Conf.set('Defaults','author_name',self.txtAuthor.GetValue())
        Conf.set('Defaults','author_email',self.txtEmail.GetValue())
        Conf.set('Defaults','author_url',self.txtURL.GetValue())
        Conf.set('Defaults','ask_before_close',str(int(self.chkCloseQuery.IsChecked())))
        configfile = open('pyg.conf', 'wb')
        Conf.write(configfile)
        configfile.close()

# end of class OptionsDialog


class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.notebook = wx.Notebook(self, -1, style=0)
        self.post_pane = wx.Panel(self.notebook, -1)
        self.folders_pane = wx.Panel(self.notebook, -1)
        self.build_options_pane = wx.Panel(self.notebook, -1)
        self.gameinfo_pane = wx.Panel(self.notebook, -1)
        
        # Menu Bar
        self.frmMain_menubar = wx.MenuBar()
        self.mnuFile = wx.Menu()
        self.mnuOpen = wx.MenuItem(self.mnuFile, wx.NewId(), "Open Project...\tF2", "Load a previously saved build project", wx.ITEM_NORMAL)
        self.mnuFile.AppendItem(self.mnuOpen)
        self.mnuSave = wx.MenuItem(self.mnuFile, wx.NewId(), "Save\tCtrl-S", "Save Project", wx.ITEM_NORMAL)
        self.mnuFile.AppendItem(self.mnuSave)
        self.mnuSaveAs = wx.MenuItem(self.mnuFile, wx.NewId(), "Save As...", "Save a copy of the project", wx.ITEM_NORMAL)
        self.mnuFile.AppendItem(self.mnuSaveAs)
        self.mnuClose = wx.MenuItem(self.mnuFile, wx.NewId(), "&Close", "Close the current project", wx.ITEM_NORMAL)
        self.mnuFile.AppendItem(self.mnuClose)
        self.mnuFile.AppendSeparator()
        self.mnuExit = wx.MenuItem(self.mnuFile, wx.NewId(), "E&xit\tCtrl-X", "Quit program", wx.ITEM_NORMAL)
        self.mnuFile.AppendItem(self.mnuExit)
        self.frmMain_menubar.Append(self.mnuFile, "&File")
        self.mnuTools = wx.Menu()
        self.mnuBuild = wx.MenuItem(self.mnuTools, wx.NewId(), "&Build...\tF5", "Build Pygame project", wx.ITEM_NORMAL)
        self.mnuTools.AppendItem(self.mnuBuild)
        self.mnuTools.AppendSeparator()
        self.mnuOptions = wx.MenuItem(self.mnuTools, wx.NewId(), "Options...", "Set your user-defined preferences", wx.ITEM_NORMAL)
        self.mnuTools.AppendItem(self.mnuOptions)
        self.frmMain_menubar.Append(self.mnuTools, "&Tools")
        self.mnuHelp = wx.Menu()
        self.mnuHelpContents = wx.MenuItem(self.mnuHelp, wx.NewId(), "Contents...\tF1", "Launch the help file for PPB", wx.ITEM_NORMAL)
        self.mnuHelp.AppendItem(self.mnuHelpContents)
        self.mnuHelp.AppendSeparator()
        self.mnuAbout = wx.MenuItem(self.mnuHelp, wx.NewId(), "About...", "About Pygame Package Builder", wx.ITEM_NORMAL)
        self.mnuHelp.AppendItem(self.mnuAbout)
        self.frmMain_menubar.Append(self.mnuHelp, "&Help")
        self.SetMenuBar(self.frmMain_menubar)
        # Menu Bar end
        self.frmMain_statusbar = self.CreateStatusBar(1, wx.ST_SIZEGRIP)
        self.lblGameName = wx.StaticText(self.gameinfo_pane, -1, "Game Name:")
        self.txtGameName = wx.TextCtrl(self.gameinfo_pane, -1, "")
        self.lblVersion = wx.StaticText(self.gameinfo_pane, -1, "Version:")
        self.txtVersion = wx.TextCtrl(self.gameinfo_pane, -1, "1.0")
        self.lblAuthor = wx.StaticText(self.gameinfo_pane, -1, "Author:")
        self.txtAuthor = wx.TextCtrl(self.gameinfo_pane, -1, "")
        self.lblEmail = wx.StaticText(self.gameinfo_pane, -1, "E-Mail:")
        self.txtEmail = wx.TextCtrl(self.gameinfo_pane, -1, "")
        self.lblURL = wx.StaticText(self.gameinfo_pane, -1, "URL:")
        self.txtURL = wx.TextCtrl(self.gameinfo_pane, -1, "")
        self.chkDefaultIcon = wx.CheckBox(self.gameinfo_pane, -1, "Use Default Pygame Icon")
        self.lblIcon = wx.StaticText(self.gameinfo_pane, -1, "Icon:")
        self.txtGameIcon = wx.TextCtrl(self.gameinfo_pane, -1, "", style=wx.TE_READONLY)
        self.cmdIconBrowse = wx.Button(self.gameinfo_pane, -1, "Browse...")
        self.lblGameScript = wx.StaticText(self.gameinfo_pane, -1, "Game Script:")
        self.txtGameScript = wx.TextCtrl(self.gameinfo_pane, -1, "", style=wx.TE_READONLY)
        self.cmdGameScriptBrowse = wx.Button(self.gameinfo_pane, -1, "Browse...", style=wx.BU_EXACTFIT)
        self.lblEXEName = wx.StaticText(self.gameinfo_pane, -1, "EXE Name:")
        self.txtEXEName = wx.TextCtrl(self.gameinfo_pane, -1, "")
        self.chkCompress = wx.CheckBox(self.build_options_pane, -1, "Compress Library")
        self.chkBundleInExe = wx.CheckBox(self.build_options_pane, -1, "Bundle Library in Executable")
        self.chkASCII = wx.CheckBox(self.build_options_pane, -1, "ASCII Encoding Only")
        self.chkRemoveBuildDir = wx.CheckBox(self.build_options_pane, -1, "Remove /build on completion")
        self.chkIncludeSDL = wx.CheckBox(self.build_options_pane, -1, "Include SDL DLLs")
        self.lblOptimize = wx.StaticText(self.build_options_pane, -1, "Optimization Level:", style=wx.ALIGN_RIGHT)
        self.cmbOptimizeLevel = wx.Choice(self.build_options_pane, -1, choices=["None", "Some (1)", "Full Optimization (2)"])
        self.lblGameTyoe = wx.StaticText(self.build_options_pane, -1, "Game Type:", style=wx.ALIGN_RIGHT)
        self.cmbGameType = wx.Choice(self.build_options_pane, -1, choices=["Window", "Console"])
        self.lblModuleExcludes = wx.StaticText(self.build_options_pane, -1, "Excludes")
        self.static_line_1 = wx.StaticLine(self.build_options_pane, -1)
        self.txtExcludeModule = wx.TextCtrl(self.build_options_pane, -1, "")
        self.RemoveExclude = wx.Button(self.build_options_pane, -1, "Remove")
        self.AddExclude = wx.Button(self.build_options_pane, -1, "Add")
        self.lstExcludes = wx.ListBox(self.build_options_pane, -1, choices=[], style=wx.LB_SINGLE|wx.LB_NEEDED_SB|wx.LB_SORT)
        self.ExcludeReset = wx.Button(self.build_options_pane, -1, "Reset to Defaults")
        self.lblIgnores = wx.StaticText(self.build_options_pane, -1, "Ignores")
        self.static_line_1_copy = wx.StaticLine(self.build_options_pane, -1)
        self.txtIgnore = wx.TextCtrl(self.build_options_pane, -1, "")
        self.RemoveIgnore = wx.Button(self.build_options_pane, -1, "Remove")
        self.AddIgnore = wx.Button(self.build_options_pane, -1, "Add")
        self.lstIgnores = wx.ListBox(self.build_options_pane, -1, choices=[], style=wx.LB_SINGLE|wx.LB_NEEDED_SB|wx.LB_SORT)
        self.IgnoreReset = wx.Button(self.build_options_pane, -1, "Reset to Defaults")
        self.GameFilesHeader = wx.StaticText(self.folders_pane, -1, "Add any extra data files for your game here. You can add whole folders with wildcards, or individual files")
        self.AddFolder = wx.Button(self.folders_pane, -1, "Add Folder")
        self.AddFile = wx.Button(self.folders_pane, -1, "Add File")
        self.lstFiles = wx.ListCtrl(self.folders_pane, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.PostHeader = wx.StaticText(self.post_pane, -1, "Set up any actions that should occur after a build is completed")
        self.chkRunScript = wx.CheckBox(self.post_pane, -1, "Run Python Script")
        self.lblPostScript = wx.StaticText(self.post_pane, -1, "Script:")
        self.txtPostScript = wx.TextCtrl(self.post_pane, -1, "")
        self.cmdBrowsePostScript = wx.Button(self.post_pane, -1, "Browse...")
        self.chkRunOnFail = wx.CheckBox(self.post_pane, -1, "Run script on build failure")
        self.static_line_3 = wx.StaticLine(self.post_pane, -1)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.OnOpen, self.mnuOpen)
        self.Bind(wx.EVT_MENU, self.OnSave, self.mnuSave)
        self.Bind(wx.EVT_MENU, self.OnSaveAs, self.mnuSaveAs)
        self.Bind(wx.EVT_MENU, self.OnClose, self.mnuClose)
        self.Bind(wx.EVT_MENU, self.OnExit, self.mnuExit)
        self.Bind(wx.EVT_MENU, self.OnBuild, self.mnuBuild)
        self.Bind(wx.EVT_MENU, self.OnOptions, self.mnuOptions)
        self.Bind(wx.EVT_MENU, self.OnHelpContents, self.mnuHelpContents)
        self.Bind(wx.EVT_MENU, self.OnAbout, self.mnuAbout)
        self.Bind(wx.EVT_TEXT, self.OnGameName, self.txtGameName)
        self.Bind(wx.EVT_CHECKBOX, self.OnDefaultIcon, self.chkDefaultIcon)
        self.Bind(wx.EVT_BUTTON, self.OnIconBrowse, self.cmdIconBrowse)
        self.Bind(wx.EVT_BUTTON, self.OnScriptBrowse, self.cmdGameScriptBrowse)
        self.Bind(wx.EVT_TEXT, self.OnEXEText, self.txtEXEName)
        self.Bind(wx.EVT_CHECKBOX, self.OnCompress, self.chkCompress)
        self.Bind(wx.EVT_CHECKBOX, self.OnBundle, self.chkBundleInExe)
        self.Bind(wx.EVT_CHECKBOX, self.OnASCII, self.chkASCII)
        self.Bind(wx.EVT_CHECKBOX, self.OnRemoveBuild, self.chkRemoveBuildDir)
        self.Bind(wx.EVT_CHECKBOX, self.OnIncludeSDL, self.chkIncludeSDL)
        self.Bind(wx.EVT_CHOICE, self.OnOptimizeLevel, self.cmbOptimizeLevel)
        self.Bind(wx.EVT_CHOICE, self.OnGameType, self.cmbGameType)
        self.Bind(wx.EVT_TEXT, self.OnExcludeText, self.txtExcludeModule)
        self.Bind(wx.EVT_BUTTON, self.OnRemoveExclude, self.RemoveExclude)
        self.Bind(wx.EVT_BUTTON, self.OnAddExclude, self.AddExclude)
        self.Bind(wx.EVT_BUTTON, self.OnExcludeReset, self.ExcludeReset)
        self.Bind(wx.EVT_TEXT, self.OnIgnoreText, self.txtIgnore)
        self.Bind(wx.EVT_BUTTON, self.OnRemoveIgnore, self.RemoveIgnore)
        self.Bind(wx.EVT_BUTTON, self.OnAddIgnore, self.AddIgnore)
        self.Bind(wx.EVT_BUTTON, self.OnIgnoreReset, self.IgnoreReset)
        self.Bind(wx.EVT_BUTTON, self.OnAddFolder, self.AddFolder)
        self.Bind(wx.EVT_BUTTON, self.OnAddFile, self.AddFile)
        self.Bind(wx.EVT_LIST_ITEM_SELECTED, self.OnListSelected, self.lstFiles)
        self.Bind(wx.EVT_CHECKBOX, self.OnRunPostScript, self.chkRunScript)
        self.Bind(wx.EVT_BUTTON, self.OnBrowsePostScript, self.cmdBrowsePostScript)
        self.Bind(wx.EVT_CHECKBOX, self.OnRunOnFail, self.chkRunOnFail)
        # end wxGlade
        self.projectFilename = None
        self.lstFiles.InsertColumn(0,"Type")
        self.lstFiles.InsertColumn(1,"File/Folder")
        self.lstFiles.InsertColumn(2,"Search Subfolders", wx.LIST_FORMAT_RIGHT)
        self.lstFiles.InsertColumn(3,"Wildcard", wx.LIST_FORMAT_RIGHT)
        self.lstFiles.InsertColumn(4,"Target Folder")
        
        self.lstFiles.SetColumnWidth(1,150)
        self.lstFiles.SetColumnWidth(2,60)
        #self.lstFiles.SetColumnWidth(2,wx.LIST_AUTOSIZE)
        #self.lstFiles.SetColumnWidth(3,wx.LIST_AUTOSIZE)
        self.currentItem = None
        self.lstFiles.Bind(wx.EVT_COMMAND_RIGHT_CLICK, self.OnListRightClick)
        self.lstFiles.Bind(wx.EVT_RIGHT_UP, self.OnListRightClick)

    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle("Pygame Package Builder")
        _icon = wx.EmptyIcon()
        _icon.CopyFromBitmap(wx.Bitmap("pygame.ico", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)
        self.SetSize((672, 597))
        self.frmMain_statusbar.SetStatusWidths([-1])
        # statusbar fields
        frmMain_statusbar_fields = ["Ready."]
        for i in range(len(frmMain_statusbar_fields)):
            self.frmMain_statusbar.SetStatusText(frmMain_statusbar_fields[i], i)
        self.txtGameName.SetMinSize((250, -1))
        self.txtVersion.SetMinSize((50, -1))
        self.txtAuthor.SetMinSize((150, -1))
        self.txtEmail.SetMinSize((150, -1))
        self.txtEmail.SetValidator(EMailValidator(None))
        self.txtURL.SetMinSize((150, -1))
        self.chkDefaultIcon.SetValue(1)
        self.lblIcon.Enable(False)
        self.txtGameIcon.SetMinSize((400, -1))
        self.txtGameIcon.SetToolTipString("Custom icon used for your game.")
        self.txtGameIcon.Enable(False)
        self.cmdIconBrowse.Enable(False)
        self.txtGameScript.SetMinSize((400, -1))
        self.txtGameScript.SetToolTipString("The main script that launches your game")
        self.txtEXEName.SetMinSize((200, -1))
        self.txtEXEName.SetToolTipString("The name of the executable for your game,\nwithout the .exe extension. If blank, the name of your\ngame script will be used.")
        self.txtEXEName.SetValidator(EXEValidator(None))
        self.chkCompress.SetToolTipString("Create a compressed library of all modules")
        self.chkCompress.SetValue(1)
        self.chkBundleInExe.SetToolTipString("Bundling libraries into the executable\nresults in faster load times (recommended)")
        self.chkBundleInExe.SetValue(1)
        self.chkASCII.SetToolTipString("Remove all but ASCII encoding from package.\nReduces size, but makes it less portable.")
        self.chkASCII.SetValue(1)
        self.chkRemoveBuildDir.SetToolTipString("Remove the /build directory when packaging is complete.\nThis directory is only needed for the build process itself.")
        self.chkRemoveBuildDir.SetValue(1)
        self.chkIncludeSDL.SetToolTipString("Packages SDL DLLs with project externally.\nIf you are experiencing errors with your game, try this option.")
        self.chkIncludeSDL.Enable(False)
        self.cmbOptimizeLevel.SetToolTipString("Optimization level of Python code")
        self.cmbOptimizeLevel.SetSelection(2)
        self.cmbGameType.SetToolTipString("Determines whether or not to show DOS shell")
        self.cmbGameType.SetSelection(0)
        self.lblModuleExcludes.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.txtExcludeModule.SetValidator(EXEValidator(None))
        self.AddExclude.Enable(False)
        self.lstExcludes.SetMinSize((300, 100))
        self.lstExcludes.SetToolTipString("List of modules to exclude.\nBe careful not to exclude a module you may need!")
        self.lblIgnores.SetFont(wx.Font(8, wx.DEFAULT, wx.NORMAL, wx.BOLD, 0, ""))
        self.txtIgnore.SetValidator(EXEValidator(None))
        self.AddIgnore.Enable(False)
        self.lstIgnores.SetMinSize((300, 100))
        self.lstIgnores.SetToolTipString("List of modules that can be ignored by the build.\nUse this if you keep getting warnings for modules that you can safely ignore.")
        self.lblPostScript.Enable(False)
        self.txtPostScript.SetMinSize((400, -1))
        self.txtPostScript.Enable(False)
        self.cmdBrowsePostScript.Enable(False)
        self.chkRunOnFail.SetToolTipString("Only run the script if the build fails")
        self.chkRunOnFail.Enable(False)
        # end wxGlade
        self.mnuSave.Enable(False)
        self.mnuClose.Enable(False)
        self.reloadDefaults()
        self.SetTitle(APP_NAME + " - <New Project>")
        # Set defaults
        self.txtAuthor.SetValue(Conf.get('Defaults','author_name'))
        self.txtEmail.SetValue(Conf.get('Defaults','author_email'))
        self.txtURL.SetValue(Conf.get('Defaults','author_url'))
        
        if sys.platform == 'win32':
            self.chkIncludeSDL.Enable(True)

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        sizer_main = wx.BoxSizer(wx.VERTICAL)
        sizer_29 = wx.BoxSizer(wx.VERTICAL)
        sizer_32 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_31 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_30 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_28 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_9 = wx.BoxSizer(wx.VERTICAL)
        sizer_13_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_14_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_16_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_15_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_17_copy = wx.BoxSizer(wx.VERTICAL)
        sizer_13 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_14 = wx.BoxSizer(wx.VERTICAL)
        sizer_16 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_15 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_17 = wx.BoxSizer(wx.VERTICAL)
        sizer_11_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_11 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_43 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_18_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_18 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_2_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6_copy_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6_copy = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(self.lblGameName, 0, wx.LEFT|wx.TOP|wx.BOTTOM|wx.ALIGN_CENTER_VERTICAL, 8)
        sizer_4.Add(self.txtGameName, 0, wx.TOP|wx.BOTTOM, 8)
        sizer_3.Add(sizer_4, 0, wx.EXPAND, 0)
        sizer_5.Add((21, 20), 0, 0, 0)
        sizer_5.Add(self.lblVersion, 0, wx.LEFT|wx.TOP|wx.BOTTOM|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 8)
        sizer_5.Add(self.txtVersion, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 8)
        sizer_3.Add(sizer_5, 0, wx.EXPAND, 0)
        sizer_6.Add((22, 20), 0, 0, 0)
        sizer_6.Add(self.lblAuthor, 0, wx.LEFT|wx.TOP|wx.BOTTOM|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 8)
        sizer_6.Add(self.txtAuthor, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 8)
        sizer_3.Add(sizer_6, 0, wx.EXPAND, 0)
        sizer_6_copy.Add((26, 20), 0, 0, 0)
        sizer_6_copy.Add(self.lblEmail, 0, wx.LEFT|wx.TOP|wx.BOTTOM|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 8)
        sizer_6_copy.Add(self.txtEmail, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 8)
        sizer_3.Add(sizer_6_copy, 0, wx.EXPAND, 0)
        sizer_6_copy_copy.Add((34, 20), 0, 0, 0)
        sizer_6_copy_copy.Add(self.lblURL, 0, wx.LEFT|wx.TOP|wx.BOTTOM|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 8)
        sizer_6_copy_copy.Add(self.txtURL, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 8)
        sizer_3.Add(sizer_6_copy_copy, 0, wx.EXPAND, 0)
        sizer_7.Add(self.chkDefaultIcon, 0, wx.LEFT|wx.TOP|wx.BOTTOM|wx.ALIGN_CENTER_VERTICAL, 8)
        sizer_3.Add(sizer_7, 0, wx.EXPAND, 0)
        sizer_8.Add((30, 15), 0, 0, 0)
        sizer_8.Add(self.lblIcon, 0, wx.LEFT|wx.TOP|wx.BOTTOM|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 8)
        sizer_8.Add(self.txtGameIcon, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_8.Add(self.cmdIconBrowse, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_3.Add(sizer_8, 0, wx.EXPAND, 0)
        sizer_2.Add(self.lblGameScript, 0, wx.LEFT|wx.BOTTOM|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_2.Add(self.txtGameScript, 0, wx.TOP|wx.BOTTOM|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_2.Add(self.cmdGameScriptBrowse, 0, wx.LEFT|wx.TOP|wx.BOTTOM|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_3.Add(sizer_2, 0, wx.EXPAND, 0)
        sizer_2_copy.Add((9, 10), 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_2_copy.Add(self.lblEXEName, 0, wx.LEFT|wx.BOTTOM|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_2_copy.Add(self.txtEXEName, 0, wx.TOP|wx.BOTTOM|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_3.Add(sizer_2_copy, 0, wx.EXPAND, 0)
        self.gameinfo_pane.SetSizer(sizer_3)
        sizer_10.Add(self.chkCompress, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_9.Add(sizer_10, 0, wx.EXPAND, 0)
        sizer_10_copy.Add(self.chkBundleInExe, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_9.Add(sizer_10_copy, 0, wx.EXPAND, 0)
        sizer_18.Add(self.chkASCII, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_9.Add(sizer_18, 0, wx.EXPAND, 0)
        sizer_18_copy.Add(self.chkRemoveBuildDir, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_9.Add(sizer_18_copy, 0, wx.EXPAND, 0)
        sizer_43.Add(self.chkIncludeSDL, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_9.Add(sizer_43, 0, wx.EXPAND, 0)
        sizer_11.Add(self.lblOptimize, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_11.Add(self.cmbOptimizeLevel, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_9.Add(sizer_11, 0, wx.EXPAND, 0)
        sizer_11_copy.Add(self.lblGameTyoe, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_11_copy.Add(self.cmbGameType, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_9.Add(sizer_11_copy, 0, wx.EXPAND, 0)
        sizer_17.Add(self.lblModuleExcludes, 0, wx.TOP, 5)
        sizer_17.Add(self.static_line_1, 0, wx.BOTTOM|wx.EXPAND, 8)
        sizer_9.Add(sizer_17, 0, wx.EXPAND, 0)
        sizer_13.Add((10, 28), 0, 0, 0)
        sizer_13.Add(self.txtExcludeModule, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_14.Add((20, 20), 0, 0, 0)
        sizer_15.Add(self.RemoveExclude, 0, 0, 0)
        sizer_14.Add(sizer_15, 0, wx.EXPAND, 0)
        sizer_16.Add(self.AddExclude, 0, 0, 0)
        sizer_14.Add(sizer_16, 0, wx.EXPAND, 0)
        sizer_13.Add(sizer_14, 0, wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_13.Add(self.lstExcludes, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_13.Add(self.ExcludeReset, 0, 0, 0)
        sizer_9.Add(sizer_13, 0, wx.EXPAND, 0)
        sizer_17_copy.Add(self.lblIgnores, 0, wx.TOP, 5)
        sizer_17_copy.Add(self.static_line_1_copy, 0, wx.BOTTOM|wx.EXPAND, 8)
        sizer_9.Add(sizer_17_copy, 0, wx.EXPAND, 0)
        sizer_13_copy.Add((10, 28), 0, 0, 0)
        sizer_13_copy.Add(self.txtIgnore, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_14_copy.Add((20, 20), 0, 0, 0)
        sizer_15_copy.Add(self.RemoveIgnore, 0, 0, 0)
        sizer_14_copy.Add(sizer_15_copy, 0, wx.EXPAND, 0)
        sizer_16_copy.Add(self.AddIgnore, 0, 0, 0)
        sizer_14_copy.Add(sizer_16_copy, 0, wx.EXPAND, 0)
        sizer_13_copy.Add(sizer_14_copy, 0, wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_13_copy.Add(self.lstIgnores, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_13_copy.Add(self.IgnoreReset, 0, 0, 0)
        sizer_9.Add(sizer_13_copy, 0, wx.EXPAND, 0)
        self.build_options_pane.SetSizer(sizer_9)
        sizer_1.Add(self.GameFilesHeader, 0, wx.ALL, 5)
        sizer_28.Add(self.AddFolder, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_28.Add(self.AddFile, 0, wx.TOP|wx.BOTTOM|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_1.Add(sizer_28, 0, wx.EXPAND, 0)
        sizer_1.Add(self.lstFiles, 1, wx.TOP|wx.EXPAND, 3)
        self.folders_pane.SetSizer(sizer_1)
        sizer_29.Add(self.PostHeader, 0, wx.LEFT|wx.TOP|wx.BOTTOM, 5)
        sizer_30.Add(self.chkRunScript, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_29.Add(sizer_30, 0, wx.EXPAND, 0)
        sizer_31.Add(self.lblPostScript, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_31.Add(self.txtPostScript, 0, 0, 0)
        sizer_31.Add(self.cmdBrowsePostScript, 0, 0, 0)
        sizer_29.Add(sizer_31, 0, wx.EXPAND, 0)
        sizer_32.Add(self.chkRunOnFail, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 3)
        sizer_29.Add(sizer_32, 0, wx.EXPAND, 0)
        sizer_29.Add(self.static_line_3, 0, wx.ALL|wx.EXPAND|wx.ALIGN_CENTER_VERTICAL, 3)
        self.post_pane.SetSizer(sizer_29)
        self.notebook.AddPage(self.gameinfo_pane, "Game Info")
        self.notebook.AddPage(self.build_options_pane, "Build Options")
        self.notebook.AddPage(self.folders_pane, "Game Files")
        self.notebook.AddPage(self.post_pane, "Post")
        sizer_main.Add(self.notebook, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_main)
        self.Layout()
        self.Centre()
        # end wxGlade

    def OnOpen(self, event): # wxGlade: MainFrame.<event_handler>
        global Project
        flags = wx.FD_OPEN | wx.FD_FILE_MUST_EXIST | wx.FD_CHANGE_DIR
        filterString = "Project Files (*.ppf)|*.ppf|All Files (*.*)|*.*"
        dlg = wx.FileDialog(self, "Open Project", os.path.curdir, "", filterString, flags)
        if dlg.ShowModal() == wx.ID_OK:
            self.projectFilename = os.path.join(dlg.GetDirectory(),dlg.GetFilename())
            Project = pickle.load(open(self.projectFilename,'rb'))
            self.mnuSave.Enable(True)
            self.mnuClose.Enable(True)
            self.setProjectValues()
            self.SetTitle(APP_NAME + " - %s" % (dlg.GetFilename(),))


    def OnSave(self, event): # wxGlade: MainFrame.<event_handler>
        global Project
        self.FinalizeProject()
        pickle.dump(Project,open(self.projectFilename,'wb'),pickle.HIGHEST_PROTOCOL)
        self.frmMain_statusbar.SetStatusText('Project saved.',0)

    def OnSaveAs(self, event): # wxGlade: MainFrame.<event_handler>
        global Project
        flags = wx.FD_SAVE | wx.FD_CHANGE_DIR
        filterString = "Project Files (*.ppf)|*.ppf|All Files (*.*)|*.*"
        dlg = wx.FileDialog(self, "Save Project As...", os.path.curdir, "", filterString, flags)
        if dlg.ShowModal() == wx.ID_OK:
            savefilename = os.path.join(str(dlg.GetDirectory()),str(dlg.GetFilename()))
            self.projectFilename = savefilename
            self.FinalizeProject()
            pickle.dump(Project,open(savefilename,'wb'),pickle.HIGHEST_PROTOCOL)
            self.mnuSave.Enable(True)
            self.mnuClose.Enable(True)
            self.SetTitle(APP_NAME + " - %s" % (dlg.GetFilename(),))
            self.frmMain_statusbar.SetStatusText('Project saved.',0)

    def OnExit(self, event): # wxGlade: MainFrame.<event_handler>
        sys.exit()

    def OnBuild(self, event): # wxGlade: MainFrame.<event_handler>
        if self.txtEXEName.GetValue().strip() == '':
            self.exe_name = None
        else:
            self.exe_name = self.txtEXEName.GetValue().strip()
        
        if self.verifyData():
            self.FinalizeProject()
            dlg = BuildDialog(self, -1, '')
            dlg.SetParent(self)
            dlg.ShowModal()

    def OnScriptBrowse(self, event): # wxGlade: MainFrame.<event_handler>
        flags = wx.FD_OPEN | wx.FD_FILE_MUST_EXIST | wx.FD_CHANGE_DIR
        filterString = "Python Files (*.py)|*.py|Python Windows Files (*.pyw)|*.pyw|All Files (*.*)|*.*"
        dlg = wx.FileDialog(self, "Set Main Game Script File", os.path.curdir, "", filterString, flags)
        if dlg.ShowModal() == wx.ID_OK:
            Project.mainScript = str(dlg.GetFilename())
            Project.baseGameDir = str(dlg.GetDirectory())
            self.txtGameScript.SetValue(os.path.join(Project.baseGameDir,Project.mainScript))
            exe_name,ext = os.path.splitext(Project.mainScript)
            self.txtEXEName.SetValue(exe_name)
            Project.exe_name = exe_name

    def OnExcludeText(self, event): # wxGlade: MainFrame.<event_handler>
          if len(self.txtExcludeModule.GetValue().strip()) > 0:
               self.AddExclude.Enable(True)
          else:
               self.AddExclude.Enable(False)
          
    def OnRemoveExclude(self, event): # wxGlade: MainFrame.<event_handler>
        if self.lstExcludes.GetSelection() != wx.NOT_FOUND:
            self.lstExcludes.Delete(self.lstExcludes.GetSelection())

    def OnAddExclude(self, event): # wxGlade: MainFrame.<event_handler>
        val = self.txtExcludeModule.GetValue().strip()
        if val in self.lstExcludes.GetStrings():
            dlg = wx.MessageDialog(self, "%s is already on the exclude list." % (val,),
                'Module already present',
                wx.OK | wx.ICON_INFORMATION
                #wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
            )
            dlg.ShowModal()
            dlg.Destroy()
        else:
            exclude_strings = self.lstExcludes.GetStrings()
            exclude_strings.append(val)
            exclude_strings = qsort(exclude_strings)
            self.lstExcludes.Clear()
            self.lstExcludes.Set(exclude_strings)
            #self.lstExcludes.Insert(val,0)
            self.txtExcludeModule.SetValue('')
            
        self.txtExcludeModule.SetFocus()

    def OnIgnoreText(self, event): # wxGlade: MainFrame.<event_handler>
          if len(self.txtIgnore.GetValue().strip()) > 0:
               self.AddIgnore.Enable(True)
          else:
               self.AddIgnore.Enable(False)

    def OnRemoveIgnore(self, event): # wxGlade: MainFrame.<event_handler>
        if self.lstIgnores.GetSelection() != wx.NOT_FOUND:
            self.lstIgnores.Delete(self.lstIgnores.GetSelection())

    def OnAddIgnore(self, event): # wxGlade: MainFrame.<event_handler>
        val = self.txtIgnore.GetValue().strip()
        if val in self.lstIgnores.GetStrings():
            dlg = wx.MessageDialog(self, "%s is already on the ignore list." % (val,),
                'Module already present',
                wx.OK | wx.ICON_INFORMATION
                #wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
            )
            dlg.ShowModal()
            dlg.Destroy()
        else:
            include_strings = self.lstIgnores.GetStrings()
            include_strings.append(val)
            include_strings = qsort(include_strings)
            self.lstIgnores.Clear()
            self.lstIgnores.Set(include_strings)
            #self.lstIgnores.Insert(self.txtIgnore.GetValue().strip(),0)
            self.txtIgnore.SetValue('')
        self.txtIgnore.SetFocus()

    def OnDefaultIcon(self, event): # wxGlade: MainFrame.<event_handler>
        self.lblIcon.Enable(not event.IsChecked())
        self.txtGameIcon.Enable(not event.IsChecked())
        self.cmdIconBrowse.Enable(not event.IsChecked())
        Project.useDefaultIcon = event.IsChecked()

    def OnGameName(self, event): # wxGlade: MainFrame.<event_handler>
        global Project
        Project.gameName = str(self.txtGameName.GetValue().strip())  

    def OnGameType(self, event): # wxGlade: MainFrame.<event_handler>
        global Project
        if self.cmbGameType.GetCurrentSelection() == 0:
            Project.targetType = 'win'
        elif self.cmbGameType.GetCurrentSelection() == 1:
            Project.targetType = 'con'

    def OnCompress(self, event): # wxGlade: MainFrame.<event_handler>
        if self.chkCompress.IsChecked():
            Project.compression = 1
            self.chkBundleInExe.Enable(True)
        else:
            Project.compression = 0
            self.chkBundleInExe.SetValue(1)
            self.chkBundleInExe.Enable(False)
            Project.bundleLevel = 2

    def OnBundle(self, event): # wxGlade: MainFrame.<event_handler>
        # Bundle library into executable?
        if self.chkBundleInExe.IsChecked():
            Project.bundleLevel = 2
        else:
            Project.bundleLevel = 1

    def OnASCII(self, event): # wxGlade: MainFrame.<event_handler>
        # ASCII-only encoding?
        if self.chkASCII.IsChecked():
            Project.useASCIIOnly = 1
        else:
            Project.useASCIIOnly = 0

    def OnIconBrowse(self, event): # wxGlade: MainFrame.<event_handler>
        flags = wx.FD_OPEN | wx.FD_FILE_MUST_EXIST | wx.FD_CHANGE_DIR
        filterString = "Windows Icon Files (*.ico)|*.ico|PNG Files (*.png)|*.png|Bitmap Files (*.bmp)|*.bmp"
        dlg = wx.FileDialog(self, "Select Game Icon", os.path.curdir, "", filterString, flags)
        if dlg.ShowModal() == wx.ID_OK:
            Project.iconFile = os.path.join(dlg.GetDirectory(),dlg.GetFilename())
            self.txtGameIcon.SetValue(Project.iconFile)
    # end OnIconBrowse

    def OnRemoveBuild(self, event): # wxGlade: MainFrame.<event_handler>
        Project.removeBuildOnExit = self.chkRemoveBuildDir.IsChecked()

    def OnOptimizeLevel(self, event): # wxGlade: MainFrame.<event_handler>
        Project.optimizeLevel = self.cmbOptimizeLevel.GetSelection()
    # end OnOptimizeLevel
    
    def verifyData(self):
        if self.txtGameName.GetValue().strip() == '':
            dlg = wx.MessageDialog(self, 'A game name is required to build.',
                'Missing Information',
                wx.OK | wx.ICON_INFORMATION
                #wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
            )
            dlg.ShowModal()
            dlg.Destroy()
            return False
            
        return True 

    def OnClose(self, event): # wxGlade: MainFrame.<event_handler>
        ask_to_save = Conf.getint('Defaults','ask_before_close')
        if ask_to_save:
            dlg = wx.MessageDialog(self, 'Save this project before closing?',
                'Save Project?',
                wx.YES_NO | wx.ICON_QUESTION
                #wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
            )
            if dlg.ShowModal() == wx.ID_YES:
                if self.projectFilename is None:
                    dlg.Destroy()
                    global Project
                    self.FinalizeProject()
                    flags = wx.FD_SAVE | wx.FD_CHANGE_DIR
                    filterString = "Project Files (*.ppf)|*.ppf|All Files (*.*)|*.*"
                    dlg = wx.FileDialog(self, "Save Project As...", os.path.curdir, "", filterString, flags)
                    if dlg.ShowModal() == wx.ID_OK:
                        savefilename = os.path.join(str(dlg.GetDirectory()),str(dlg.GetFilename()))
                        self.projectFilename = savefilename
                        pickle.dump(Project,open(savefilename,'wb'),pickle.HIGHEST_PROTOCOL)
                        self.frmMain_statusbar.SetStatusText('Project saved.',0)
                else:
                    pickle.dump(Project,open(self.projectFilename,'wb'),pickle.HIGHEST_PROTOCOL)
                    self.frmMain_statusbar.SetStatusText('Project saved.',0)
            dlg.Destroy()
            
        self.resetControls()
        self.mnuClose.Enable(False)
        self.mnuSave.Enable(False)
        self.projectFilename = None
        self.SetTitle(APP_NAME + " - <New Project>")
        # Set defaults
        self.txtAuthor.SetValue(Conf.get('Defaults','author_name'))
        self.txtEmail.SetValue(Conf.get('Defaults','author_email'))
        self.txtURL.SetValue(Conf.get('Defaults','author_url'))
        self.notebook.ChangeSelection(0)

    def resetControls(self):
        global Project
        global STARTDIR
        # Resets all controls to a default state
        self.txtGameName.SetValue('')
        self.txtVersion.SetValue('1.0')
        self.txtAuthor.SetValue('')
        self.txtEmail.SetValue('')
        self.txtURL.SetValue('')
        self.chkDefaultIcon.SetValue(1)
        self.lblIcon.Enable(False)
        self.txtGameIcon.Enable(False)
        self.cmdIconBrowse.Enable(False)
        self.txtGameScript.SetValue('')
        self.txtEXEName.SetValue('')
        self.txtGameIcon.SetValue('')

        self.lstIgnores.Set(open(os.path.join(STARTDIR,'def_ignores.txt')).readlines())
        self.lstExcludes.Set(open(os.path.join(STARTDIR,'def_excludes.txt')).readlines())
        Project.excludeModules = []
        Project.ignoreModules = []
        for x in range(self.lstExcludes.GetCount()):
            Project.excludeModules.append(self.lstExcludes.GetString(x).strip())
            
        for x in range(self.lstIgnores.GetCount()):
            Project.ignoreModules.append(self.lstIgnores.GetString(x).strip())
            
        os.chdir(STARTDIR)
        self.lstFiles.DeleteAllItems()
        self.chkRunScript.SetValue(0)
        self.lblPostScript.Enable(False)
        self.txtPostScript.Enable(False)
        self.cmdBrowsePostScript.Enable(False)
        self.chkRunOnFail.Enable(False)
        self.txtPostScript.SetValue('')
        self.chkRunOnFail.SetValue(0)
    
    def setProjectValues(self):
        global Project
        self.txtGameName.SetValue(Project.gameName)
        self.txtVersion.SetValue(Project.gameVersion)
        self.txtAuthor.SetValue(Project.authorName)
        self.txtEmail.SetValue(Project.authorEmail)
        self.txtURL.SetValue(Project.gameURL)
        if Project.useDefaultIcon:
            self.chkDefaultIcon.SetValue(1)
            self.lblIcon.Enable(False)
            self.txtGameIcon.Enable(False)
            self.cmdIconBrowse.Enable(False)
        else:
            self.chkDefaultIcon.SetValue(0)
            self.lblIcon.Enable(True)
            self.txtGameIcon.Enable(True)
            self.txtGameIcon.SetValue(Project.iconFile)
            self.cmdIconBrowse.Enable(True)
        #self.txtEXEName.SetValue('')
        self.txtEXEName.SetValue(Project.exe_name)
        self.txtGameScript.SetValue(Project.mainScript)
        self.chkCompress.SetValue(Project.compression)
        if Project.bundleLevel == 2:
            self.chkBundleInExe.SetValue(1)
        else:
            self.chkBundleInExe.SetValue(0)
        self.chkASCII.SetValue(Project.useASCIIOnly)
        self.cmbOptimizeLevel.SetSelection(Project.optimizeLevel)
        # Load in the module excludes and ignores from the Project file
        self.lstExcludes.Clear()
        self.lstIgnores.Clear()
        self.lstExcludes.Set(Project.excludeModules)
        self.lstIgnores.Set(Project.ignoreModules)
        self.lstFiles.DeleteAllItems()
        self.chkIncludeSDL.SetValue(Project.includeSDL)
        
        
        # Build data file list
        for i in range(0,len(Project.extraFiles)):
            item = Project.extraFiles[i]
            type = item.type
            if type == 0:
                index = self.lstFiles.InsertStringItem(sys.maxint,"File")
            else:
                index = self.lstFiles.InsertStringItem(sys.maxint,"Folder")
           
            if item.recurse == 1:
                recurse = 'Yes'
            else:
                recurse = 'No'
                
            self.lstFiles.SetStringItem(index,1,item.path)
            self.lstFiles.SetStringItem(index,2,recurse)
            self.lstFiles.SetStringItem(index,3,item.wildcard)
            self.lstFiles.SetStringItem(index,4,item.target)
        # Post-tab information
        if Project.runScriptPost == 1:
            self.chkRunScript.SetValue(1)
            self.lblPostScript.Enable(True)
            self.txtPostScript.Enable(True)
            self.cmdBrowsePostScript.Enable(True)
            self.chkRunOnFail.Enable(True)
            if Project.postScript is not None:
                self.txtPostScript.SetValue(Project.postScript)
            if Project.runScriptPostOnFail == 1:
                self.chkRunOnFail.SetValue(1)
        else:
            self.chkRunScript.SetValue(0)
            self.lblPostScript.Enable(False)
            self.txtPostScript.Enable(False)
            self.cmdBrowsePostScript.Enable(False)
            self.chkRunOnFail.Enable(False)
            if Project.postScript is not None:
                self.txtPostScript.SetValue(Project.postScript)
            if Project.runScriptPostOnFail == 1:
                self.chkRunOnFail.SetValue(1)


    def OnEXEText(self, event): # wxGlade: MainFrame.<event_handler>
        global Project
        Project.exe_name = self.txtEXEName.GetValue().strip()

    def FinalizeProject(self):
        # Makes sure all of the data for the project is available for saving
        # and usage during a build
        global Project
        
        # Game Info Tab
        Project.exe_name = self.txtEXEName.GetValue().strip()
        Project.gameName = self.txtGameName.GetValue().strip()
        Project.gameVersion = self.txtVersion.GetValue().strip()
        Project.authorName = self.txtAuthor.GetValue().strip()
        Project.authorEmail = self.txtEmail.GetValue().strip()
        Project.gameURL = self.txtURL.GetValue().strip()
        Project.iconFile = self.txtGameIcon.GetValue().strip()
        Project.useDefaultIcon = self.chkDefaultIcon.GetValue()
        Project.exe_name = self.txtEXEName.GetValue().strip()
        Project.mainScript = self.txtGameScript.GetValue().strip()
        
        # Build Options Tab
        Project.compression = 0
        if self.chkCompress.GetValue():
            Project.compression = 1
            
        Project.removeBuildOnExit = self.chkRemoveBuildDir.GetValue()
        Project.optimizeLevel = self.cmbOptimizeLevel.GetCurrentSelection()
        
        Project.useASCIIOnly = 0
        if self.chkASCII.GetValue():
            Project.useASCIIOnly = 1

        Project.excludeModules = self.lstExcludes.GetStrings()
        Project.ignoreModules = self.lstIgnores.GetStrings()
        
        # Game Data Files Tab
        Project.extraFiles = []
        for i in range(0,self.lstFiles.GetItemCount()):
            type = self.lstFiles.GetItem(i,0).GetText()
            if type == 'File': 
                type = 0
            else:
                type = 1
            path = self.lstFiles.GetItem(i,1).GetText()
            recurse = self.lstFiles.GetItem(i,2).GetText()
            wildcard = self.lstFiles.GetItem(i,3).GetText()
            target = self.lstFiles.GetItem(i,4).GetText()
            #path, type, recurse, wildcard, target)
            if recurse == 'Yes':
                recurse = 1
            else:
                recurse = 0
            obj = ExtraGameData(path,type,recurse,wildcard,target)
            Project.extraFiles.append(obj)
        
        # Post-Build Tab
        if self.chkRunScript.IsChecked():
            Project.runScriptPost = 1
            Project.postScript = self.txtPostScript.GetValue().strip()
            Project.runScriptPostOnFail = self.chkRunOnFail.GetValue()
        else:
            Project.runScriptPost = 0

        
    def OnAbout(self, event): # wxGlade: MainFrame.<event_handler>
        info = wx.AboutDialogInfo()
        info.Name = APP_NAME
        info.Version = __version__
        info.Copyright = "(C) 2009 Devin Watson"
        info.Description = wordwrap(
            "A utility to automate the building, packaging, and installation "
            "process for Pygame-based games.",
            350, wx.ClientDC(self))
        info.WebSite = ("http://www.moviepartners.com/blog/utilities/ppb/", "PPB Home Page")
        info.Developers = [ "Devin Watson",]
        licenseText = "This software package is free to use under the GNU GPL 2.0.\n\nNo warranty is made to its fitness. If it summons demons that shave your cat, it's not my fault."
        info.License = wordwrap(licenseText, 500, wx.ClientDC(self))

        wx.AboutBox(info)

    def OnExcludeReset(self, event): # wxGlade: MainFrame.<event_handler>
        self.reloadExcludes()
    # end OnExcludeReset

    def OnIgnoreReset(self, event): # wxGlade: MainFrame.<event_handler>
        self.reloadIgnores()
    # end OnIgnoreReset

    def OnHelpContents(self, event): # wxGlade: MainFrame.<event_handler>
        # Launches the help file
        os.startfile(os.path.join(STARTDIR,'ppb_manual.chm'))

    def OnOptions(self, event): # wxGlade: MainFrame.<event_handler>
        dlg = OptionsDialog(self, -1, '')
        #dlg.SetParent(self)
        dlg.ShowModal()
    
    def reloadDefaults(self):
        # Reloads any defaults en masse
        self.reloadIgnores()
        self.reloadExcludes()
        
    def reloadIgnores(self):
        self.lstIgnores.Clear()
        ignores = open(os.path.join(STARTDIR,'def_ignores.txt')).readlines()
        for i in range(0,len(ignores)):
            ignores[i] = ignores[i].strip()
        self.lstIgnores.Set(ignores)

    def reloadExcludes(self):
        self.lstExcludes.Clear()        
        excludes = open(os.path.join(STARTDIR,'def_excludes.txt')).readlines()
        for e in range(0,len(excludes)):
            excludes[e] = excludes[e].strip()
        
        self.lstExcludes.Set(excludes)
    
    def OnAddFolder(self, event): # wxGlade: MainFrame.<event_handler>
        dlg = AddDirDialog(self, -1, '')
        dlg.SetParent(self)
        dlg.ShowModal()

    def OnAddFile(self, event): # wxGlade: MainFrame.<event_handler>
        dlg = AddFileDialog(self, -1, '')
        dlg.SetParent(self)
        dlg.ShowModal()

    def OnBrowsePostScript(self, event): # wxGlade: MainFrame.<event_handler>
        flags = wx.FD_OPEN | wx.FD_FILE_MUST_EXIST | wx.FD_CHANGE_DIR
        filterString = "Python Files (*.py)|*.py"
        dlg = wx.FileDialog(self, "Select Post-Build Python Script", os.path.curdir, "", filterString, flags)
        if dlg.ShowModal() == wx.ID_OK:
            self.txtPostScript.SetValue(os.path.join(dlg.GetDirectory(),dlg.GetFilename()))

    def OnRunPostScript(self, event): # wxGlade: MainFrame.<event_handler>
        # Called when user clicks the check box for running a Python script post-build
        if self.chkRunScript.IsChecked():
            self.lblPostScript.Enable(True)
            self.txtPostScript.Enable(True)
            self.cmdBrowsePostScript.Enable(True)
            self.chkRunOnFail.Enable(True)
            Project.runScriptPost = 1
        else:
            self.lblPostScript.Enable(False)
            self.txtPostScript.Enable(False)
            self.cmdBrowsePostScript.Enable(False)
            self.chkRunOnFail.Enable(False)
            Project.runScriptPost = 0

    def OnRunOnFail(self, event): # wxGlade: MainFrame.<event_handler>
        if self.chkRunOnFail.IsChecked():
            Project.runScriptPostOnFail = 1
        else:
            Project.runScriptPostOnFail = 0

    def OnListSelected(self, event): # wxGlade: MainFrame.<event_handler>
        self.currentItem = event.m_itemIndex
        event.Skip()

    def OnListRightClick(self, event): # wxGlade: MainFrame.<event_handler>
        if not hasattr(self,"popupID1"):
            self.popupID1 = wx.NewId()
            self.popupID2 = wx.NewId()

            self.Bind(wx.EVT_MENU, self.OnPopupDelete, id=self.popupID1)
            self.Bind(wx.EVT_MENU, self.OnPopupDeleteAll, id=self.popupID2)
            
        menu = wx.Menu()
        type = self.lstFiles.GetItemText(self.currentItem)
        if type == 'File': 
            label = 'Remove File'
        else:
            label = 'Remove Folder'

        menu.Append(self.popupID1, label)
        menu.Append(self.popupID2, "Remove All")
        menu.SetTitle("Game Data")

        self.PopupMenu(menu)
        menu.Destroy()
    
    def OnPopupDelete(self,event):
        self.lstFiles.DeleteItem(self.currentItem)
        self.currentItem = None
    
    def OnPopupDeleteAll(self,event):
        dlg = wx.MessageDialog(self, 'This will delete all entries. Are you sure?',
            'Delete all?',
            wx.YES_NO | wx.ICON_QUESTION
            #wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION
        )
        
        if dlg.ShowModal() == wx.ID_YES:
            self.lstFiles.DeleteAllItems()
            
        dlg.Destroy()

    def OnIncludeSDL(self, event): # wxGlade: MainFrame.<event_handler>
        if self.chkIncludeSDL.IsChecked():
            Project.includeSDL = 1
        else:
            Project.includeSDL = 0

# end of class MainFrame

class BuildDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: BuildDialog.__init__
        kwds["style"] = wx.CAPTION
        wx.Dialog.__init__(self, *args, **kwds)
        self.txtBuildLog = wx.TextCtrl(self, -1, "", style=wx.TE_MULTILINE|wx.TE_READONLY)
        self.cmdClose = wx.Button(self, wx.ID_CLOSE, "")
        self.cmdSaveLog = wx.Button(self, -1, "&Save Log")
        self.cmdClearLog = wx.Button(self, -1, "Clear Log")
        self.cmdBuild = wx.Button(self, -1, "Build Project")
        self.cmdRunGame = wx.Button(self, -1, "Run Game")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.OnClose, self.cmdClose)
        self.Bind(wx.EVT_BUTTON, self.OnSaveLog, self.cmdSaveLog)
        self.Bind(wx.EVT_BUTTON, self.OnClearLog, self.cmdClearLog)
        self.Bind(wx.EVT_BUTTON, self.OnBuildProject, self.cmdBuild)
        self.Bind(wx.EVT_BUTTON, self.OnRunGame, self.cmdRunGame)
        # end wxGlade
        # Build progress should be displayed in this dialog's text box
        # so it can be reviewed or saved
        self.TextShunt = BuildTextShunt(self.txtBuildLog)
        sys.stdout = self.TextShunt
        sys.stderr = self.TextShunt

    def __set_properties(self):
        # begin wxGlade: BuildDialog.__set_properties
        self.SetTitle("Build Pygame Project")
        self.SetSize((724, 416))
        self.txtBuildLog.SetMinSize((392, 340))
        self.txtBuildLog.SetFont(wx.Font(8, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, ""))
        self.cmdRunGame.Enable(False)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: BuildDialog.__do_layout
        sizer_19 = wx.BoxSizer(wx.VERTICAL)
        sizer_20 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_19.Add(self.txtBuildLog, 0, wx.EXPAND, 0)
        sizer_20.Add((1, 30), 0, 0, 0)
        sizer_20.Add(self.cmdClose, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_20.Add(self.cmdSaveLog, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_20.Add(self.cmdClearLog, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_20.Add(self.cmdBuild, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_20.Add(self.cmdRunGame, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        sizer_19.Add(sizer_20, 0, wx.EXPAND, 0)
        self.SetSizer(sizer_19)
        self.Layout()
        self.Centre()
        # end wxGlade
        
    def SetParent(self,parent):
        self.parent = parent

    def OnClose(self, event): # wxGlade: BuildDialog.<event_handler>
        sys.stdout = sys.__stdout__
        sys.stderr = sys.__stderr__
        self.EndModal(wx.ID_OK)

    def OnSaveLog(self, event): # wxGlade: BuildDialog.<event_handler>
        flags = wx.FD_SAVE | wx.FD_CHANGE_DIR
        filterString = "Text Files (*.txt)|*.txt|Log Files (*.log)|*.log|All Files (*.*)|*.*"
        dlg = wx.FileDialog(self, "Save Log File As...", os.path.curdir, "", filterString, flags)
        if dlg.ShowModal() == wx.ID_OK:
            savefilename = os.path.join(str(dlg.GetDirectory()),str(dlg.GetFilename()))
            f = open(savefilename,'w')
            f.write(self.txtBuildLog.GetValue())
            f.close()
            dlg = wx.MessageDialog(self, 'Log saved.',
                'Information',
                wx.OK | wx.ICON_INFORMATION
            )
            dlg.ShowModal()
            dlg.Destroy()
          
    def DoBuild(self):
        global Project

        #self.cmdClose.Enable(False)
        self.cmdSaveLog.Enable(False)
        self.cmdClearLog.Enable(False)
        self.cmdBuild.Enable(False)
        self.cmdRunGame.Enable(False)
        right_now = datetime.datetime.today()
        
        print "Build process started on %s-%s-%s %s\n" % (right_now.year,right_now.month,right_now.day,right_now.time())
        print "Base game directory: %s" % (Project.baseGameDir,)
        
        BuildEngine = PyGameBuildEngine(Project)
        
        try:
            BuildEngine.RunBuild()
        except NoProjectError:
            print "Error: No valid PPF file found .. Build aborted."
        except NoIconError:
            print "Error: No icon found"
        except NameError, e:
            print "*** Fatal Build Error ***"
            print e
            print e.args
            #print "Fatal error: " + str(type(inst)) + " " + inst + " .. Build aborted."
        except BuildError, e:
            print "*** Fatal Build Error ***"
            print e
        finally:
            BuildEngine.Cleanup()

        BuildEngine.runPost()
        #self.cmdClose.Enable(True)
        self.cmdSaveLog.Enable(True)
        self.cmdClearLog.Enable(True)
        self.cmdBuild.Enable(True)
        
        if BuildEngine.buildPassed:
            self.cmdRunGame.Enable(True)
            print
            print "*********** NOTE ***********"
            print "Currently, there is a bug in the GUI which crashes PPB if you try to build more than one time per session. Please exit the GUI if you wish to do another build, or use the CLI version."

        else:
            self.cmdRunGame.Enable(False)
        BuildEngine = None
        
    def OnBuildProject(self, event): # wxGlade: BuildDialog.<event_handler>
        self.txtBuildLog.Clear()
        self.txtBuildLog.Refresh()
        self.DoBuild()

    def OnClearLog(self, event): # wxGlade: BuildDialog.<event_handler>
        self.txtBuildLog.Clear()
        self.txtBuildLog.Refresh()

    def OnRunGame(self, event): # wxGlade: BuildDialog.<event_handler>
        print "*** Start Game ***"
        os.chdir(os.path.join(Project.baseGameDir,Project.distDir))
        os.system(Project.exe_name)

# end of class BuildDialog

def qsort(L):
    """
    Porting the Erlang quicksort implementation from
    http://en.wikipedia.org/wiki/Erlang_(programming_language)
    """
    if not L: return L
    Pivot, Tail = L[0], L[1:]
    return qsort([X for X in Tail if X < Pivot]) + [Pivot] + qsort([X for X in Tail if X >= Pivot])
#end qsort

class PygameBuilderApp(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        frmMain = MainFrame(None, -1, "")
        self.SetTopWindow(frmMain)
        frmMain.Show()
        return 1

# end of class PygameBuilderApp

if __name__ == "__main__":
    app = PygameBuilderApp(0)
    app.MainLoop()
